<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TL_NCI_Axis" Id="{3ecc7304-044d-42e1-bd68-b5e36249da2d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TL_NCI_Axis EXTENDS Triamec.TL_Axis2
VAR_IN_OUT
	Trialink	: Triamec.TL_Trialink2; (* the Tria-Link adapter *)
END_VAR
VAR_INPUT
	nciAxis	: AXIS_REF; 			(* axis reference *)
	inc_per_unit : LREAL := 1E7; 	(* use 10000 inc/deg or 1E7 inc/m *)
END_VAR
VAR
		 
	State1	AT %Q*		: BYTE; 	(* NC > Axis > Drive > Inputs > nState1 *)
	State4	AT %Q*		: BYTE; 	(* NC > Axis > Drive > Inputs > nState4 *)
	PosCmd	AT %I*		: DWORD;	(* NC > Axis > Drive > Outputs > nDataOut1 *)
	PosAct	AT %Q*		: DWORD;	(* NC > Axis > Enc > Inputs > nDataIn1 *)
	
	FB_MC_Power			: MC_Power;
	FB_MC_Reset			: MC_Reset;
	FB_Reset1			: R_TRIG;
	FB_Reset2			: R_TRIG;
	
	MessageHandler	: TL_AxisMessageHandler;	// provides corresponding message string
	TcEventLib		: TL_TwinCatError;
	TcEventDrv		: TL_TwinCatError;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* --------------------------------------------- *)
(* Triamec Motion AG, 6340 Baar, Switzerland     *)
(* Sample Code may be adapted to customer need   *)
(* --------------------------------------------- *)

SUPER^.CallSlow(Trialink := THIS^.Trialink);

(*
  Sercos Status Word
  Status1 = 16#4? DriveOn  
  Status1 = 16#8? Feedhold  
  Status1 = 16#C? TorquePermission  
*)
IF NOT enable THEN
	State1 :=    0;
	State4 :=    4;
ELSIF coupled THEN
	State1 :=16#C8;
	State4 :=    4;
ELSE
	State1 :=16#C0;
	State4 :=    4;
END_IF
IF referenced THEN
	State1 :=    State1 + 1;
END_IF

(* enable the NCI module *)
FB_MC_Power.Enable			:= enable;
FB_MC_Power.Enable_Negative	:= TRUE;
FB_MC_Power.Enable_Positive	:= TRUE;
FB_MC_Power.Override		:= 100;
FB_MC_Power(Axis := nciAxis);

FB_Reset1(CLK:=NOT followMe);
FB_Reset2(CLK:=Reset);
FB_MC_Reset.Execute			:= FB_Reset1.Q OR FB_Reset2.Q;
FB_MC_Reset(Axis := nciAxis);

(* This reads the drive message string into messageHandler.messageString and then sets messageHandler.done *)
MessageHandler.execute := messageId >= TL_Message.Error; // show only errors
MessageHandler(axis:=MC_axis, Trialink:=Trialink);

(* This generates a TwinCAT event in case of an axis library error and an axis drive error *)
TcEventLib.Execute	:= Trialink.Done AND NOT (Trialink.Error OR MC_axis.simulate);
TcEventLib.errorId	:= MC_axis.errorId;
TcEventLib.source	:= TL_EventSourceId.AxisLib; // See source entry in the ecpx file triamecEventsTrialinkLib*.ecpx
TcEventLib.par1	:= MC_axis.iAxis;
TcEventLib();

TcEventDrv.Execute	:= TcEventLib.Execute AND MC_axis.messageId>=TL_Message.Error; // show only errors 
TcEventDrv.errorId	:= MC_axis.messageId;
TcEventDrv.source	:= TL_EventSourceId.AxisDrive; // See source entry in the ecpx file triamecEventsDrive*.ecpx
TcEventDrv.par1	:= MC_axis.iAxis;
TcEventDrv();]]></ST>
    </Implementation>
    <Method Name="Fast" Id="{97169bf5-433a-4a87-bcda-c373eb947f79}">
      <Declaration><![CDATA[METHOD Fast
VAR
	positionAct : LREAL; (* actual position *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// The warning can be disabled here as the user is aware of the risk that the reference may not be valid by checking its validity
{warning disable C0371}

// Checking the VAR_IN_OUT reference, leave the current method in case of invalid reference
IF NOT __ISVALIDREF(Trialink) THEN
     RETURN;
END_IF

(* get the coordinates from the NC/CNC and write it to the drive *)
fastPositionCmd := DINT_TO_LREAL(DWORD_TO_DINT(PosCmd)) / inc_per_unit;
SUPER^.CallFast( Trialink := Trialink );

(* get the actual position from the drive and pass it to NC *)
positionAct := ActualPositionFast(Trialink := Trialink);
(* coerse position to DINT range *)
IF ABS(positionAct * inc_per_unit) < 16#7FFFFFFF  THEN
	PosAct := DINT_TO_DWORD(LREAL_TO_DINT(positionAct * inc_per_unit));
ELSIF positionAct < 0 THEN
	PosAct := 16#80000000;
ELSE
	PosAct := 16#7FFFFFFF;
END_IF

// The warning may be restored at the end of the access area
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TL_NCI_Axis">
      <LineId Id="36" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="40" Count="47" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="TL_NCI_Axis.Fast">
      <LineId Id="8" Count="23" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>